pub mod ask_cli
pub enum ask_cli::Answer
pub ask_cli::Answer::No
pub ask_cli::Answer::Unknown
pub ask_cli::Answer::Yes
impl core::clone::Clone for ask_cli::Answer
pub fn ask_cli::Answer::clone(&self) -> ask_cli::Answer
impl core::cmp::Eq for ask_cli::Answer
impl core::cmp::PartialEq for ask_cli::Answer
pub fn ask_cli::Answer::eq(&self, other: &ask_cli::Answer) -> bool
impl core::fmt::Debug for ask_cli::Answer
pub fn ask_cli::Answer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for ask_cli::Answer
pub fn ask_cli::Answer::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for ask_cli::Answer
impl core::marker::StructuralPartialEq for ask_cli::Answer
impl std::process::Termination for ask_cli::Answer
pub fn ask_cli::Answer::report(self) -> std::process::ExitCode
impl core::marker::Freeze for ask_cli::Answer
impl core::marker::Send for ask_cli::Answer
impl core::marker::Sync for ask_cli::Answer
impl core::marker::Unpin for ask_cli::Answer
impl core::panic::unwind_safe::RefUnwindSafe for ask_cli::Answer
impl core::panic::unwind_safe::UnwindSafe for ask_cli::Answer
impl<T, U> core::convert::Into<U> for ask_cli::Answer where U: core::convert::From<T>
pub fn ask_cli::Answer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ask_cli::Answer where U: core::convert::Into<T>
pub type ask_cli::Answer::Error = core::convert::Infallible
pub fn ask_cli::Answer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ask_cli::Answer where U: core::convert::TryFrom<T>
pub type ask_cli::Answer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ask_cli::Answer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for ask_cli::Answer where T: core::clone::Clone
pub type ask_cli::Answer::Owned = T
pub fn ask_cli::Answer::clone_into(&self, target: &mut T)
pub fn ask_cli::Answer::to_owned(&self) -> T
impl<T> core::any::Any for ask_cli::Answer where T: 'static + ?core::marker::Sized
pub fn ask_cli::Answer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ask_cli::Answer where T: ?core::marker::Sized
pub fn ask_cli::Answer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ask_cli::Answer where T: ?core::marker::Sized
pub fn ask_cli::Answer::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for ask_cli::Answer where T: core::clone::Clone
pub unsafe fn ask_cli::Answer::clone_to_uninit(&self, dst: *mut u8)
impl<T> core::convert::From<T> for ask_cli::Answer
pub fn ask_cli::Answer::from(t: T) -> T
pub fn ask_cli::ask<Q: core::convert::AsRef<[u8]>, In: std::io::Read, Out: std::io::Write>(question: Q, default: ask_cli::Answer, stdin: &mut In, stdout: &mut Out) -> core::result::Result<ask_cli::Answer, std::io::error::Error>
